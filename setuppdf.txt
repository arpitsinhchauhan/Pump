///////////////////application.pro
docs.file_path=C:\\Users\\Arpitsinh Chauhan\\Downloads\\


////////////////////////////////////////////////////////////////back
 @RequestMapping(value = "/pdfData", method = RequestMethod.POST)
    public byte[] authenticateUser(@RequestParam("fileName") String fileName) {
        if (fileName == null) {
            return null;
        }
        if (!fileName.endsWith(".pdf") && !fileName.endsWith(".PDF")) {
            fileName = fileName + ".pdf";
        }
        try (InputStream input = DBConfig.class.getClassLoader().getResourceAsStream("application.properties")) {
            StringBuilder filterData = new StringBuilder();
            Properties prop = new Properties();
            prop.load(input);
            filterData.append(prop.getProperty("docs.file_path"));
            //File pdf = new File(filterData + fileName);

            Path path = Paths.get(filterData.toString() + fileName);
            byte[] pdf = Files.readAllBytes(path);

            if (Objects.isNull(pdf)) {
                return null;
            }
            return pdf;

        } catch (IOException ex) {
            logger.error("authenticateUser0>>>>>>>>", ex);
        } catch (Exception ex) {
            logger.error("authenticateUser1>>>>>>>>", ex);
        }
        return null;
    }
}


////////////html
<input type="date" [(ngModel)]="selectedDate">
<button (click)="downloadReport()">Make API Call</button>

///////////
export class HomeComponent implements OnInit {

  pdfSrc = "https://vadimdez.github.io/ng2-pdf-viewer/assets/pdf-test.pdf";

  apiUrl = 'http://localhost:9999/all';
  // productList: Map<String, String> | undefined;
  productList: any = [];
  data: any;
  tableData: any[] = [];
  searchTerm: string = '';
  isProcessing: boolean | undefined;
  pd: any;

  // Product | undefined;
  // { id: any; Email: any; Phone: any } | undefined
  constructor(
    private http: HttpClient,
    private use: ServicesService,
    private dialog: MatDialog,// private pipe: FilterPipe
  ) { }






  ngOnInit(): void {
    // this.loadPdf('report_2024-04-17');
    this.getdata();
    this.dataSource = [
      /* Your data goes here */
    ];
  }

  getdata() {
    this.http.get(this.apiUrl).subscribe((data) => {
      this.productList = data;
      console.log(this.productList);
    });
  }
  deleteRow(id: number) {
    console.log(id);
    alert('Product deleted successfully');
    this.use.deleteMember(id).subscribe((result) => {
      this.productList = result;
    });
    location.reload();
  }

  Update(id: number) {
    let current = this.productList.find((p: any) => {
      // alert('Your data succefully Update');
      return p.id = id;
    });
    console.log(current);
  }

  dataSource: any[] | undefined; // Your data source array
  currentPage = 1; // Current page index
  itemsPerPage = 5; // Number of items per page

  applyFilter(filterValue: string) {
    filterValue = filterValue.trim(); // Remove whitespace
    filterValue = filterValue.toLowerCase(); // Datasource defaults to lowercase matches
    this.productList.filter = filterValue;
  }

  // filteredItems: any[] = [];
  // filterItems(searchTerm: string): void {
  //   this.filteredItems = this.productList.filter(
  //     (filterItems: { name: string | string[] }) => {
  //       filterItems.name.includes(searchTerm);
  //     }
  //   );
  // }

  search(): void {
    this.productList = this.productList.filter((item: { email: string }) =>
      item.email.toLowerCase().includes(this.searchTerm.toLowerCase().trim())
    );
    if (this.searchTerm.toLowerCase() === '') {
      location.reload();
    }
  }
  reportUrl: string | undefined;


  // fetchReport() {
  //   const headers = new HttpHeaders({ 'Content-Type': 'application/pdf' });
  //   this.http.get('http://localhost:8080/api/bill', { headers: headers, responseType: 'blob' })
  //     .subscribe((response: any) => {
  //       const file = new Blob([response], { type: 'application/pdf' });
  //       this.reportUrl = URL.createObjectURL(file);
  //     });
  // }


  selectedDate!: Date | null;

  // Function to handle date selection
  dateSelected(event: MatDatepickerInputEvent<Date>) {
    this.selectedDate = event.value;
  }
 
  downloadReport(): void {
    if (!this.selectedDate) {
      console.error('Please select a date');
      return;
    }
    // Make API call to download the PDF
    this.isProcessing = true;
    this.downloadPDF();
  }

  downloadPDF() {
    // Construct the API URL with the selected date
    const apiUrl = `http://localhost:9090/api/bill?date=${this.selectedDate}`;

    // Make a GET request to the API endpoint to download the PDF
    fetch(apiUrl, {
      method: 'GET',
    })
      .then(response => {
        // Check if the response is successful
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        return response.blob(); // Extract the binary data from the response
      })
      .then(blob => {
        // Create a blob URL for the PDF
        const url = window.URL.createObjectURL(blob);

        // Create a temporary <a> element to trigger the download
        const a = document.createElement('a');
        a.href = url;
        a.download = `${this.selectedDate}.pdf`; // Set filename with date
        document.body.appendChild(a);
        a.click();

        // Clean up by revoking the blob URL and removing the <a> element
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);
        this.openPdfViewer();
      })
      .catch(error => {
        // Handle any errors
        console.error('Error downloading PDF:', error);
      });
  }

  openPDFViewerComponent(fileName: string, pdfData: any) {
    const dialogRef = this.dialog.open(CustomPdfViewerComponent, {
      maxWidth: '100%',
      maxHeight: '100%',
      width: '60%',
      height: '50%',
      data: {
        pdfData: pdfData,
        title: fileName,
        selectedDate: this.selectedDate
      }
    });
    // After the PDF viewer component is closed, initiate the download
    dialogRef.afterClosed().subscribe(() => {
      this.PDF(fileName, pdfData);
    });
  }

  PDF(fileName: string, pdfData: any) {
    // Create a blob from PDF data
    const blob = new Blob([pdfData], { type: 'application/pdf' });

    // Create a temporary link element
    const link = document.createElement('a');
    link.href = window.URL.createObjectURL(blob);
    link.download = fileName;

    // Append the link to the document and trigger a click event to start download
    document.body.appendChild(link);
    link.click();
  }

  openPdfViewer(){
    let fileName1 = `${this.selectedDate}.pdf`;
    this.use.getPDFData(fileName1).subscribe(
      (response: ArrayBuffer) => {
        if(response.byteLength!=0){
          // Open the custom PDF viewer component with PDF data
          this.openPDFViewerComponent(`${this.selectedDate}.pdf`, response);
        }else{
          this.openPdfViewer();
        }
      },
      (error: any) => {
        console.error('Error fetching PDF:', error);
        this.isProcessing = false;
      }
    );
  }

}


////////////////////////////
<h1>pdf</h1>
<div>
    <!-- <button (click)="downloadPDF()">Download PDF</button> -->
    <div class="pdf-container" style="width: 103%;">
        <pdf-viewer [src]="pdfDocumentSrc" [rotation]="0" [original-size]="false" [show-all]="true"
            [fit-to-page]="false" [zoom]="zoom_to" [zoom-scale]="'page-width'" [stick-to-page]="false"
            [render-text]="true" [external-link-target]="'blank'" [autoresize]="true" [show-borders]="false"
            class="viewer"></pdf-viewer>
    </div>
</div>  

////////////////

export class CustomPdfViewerComponent implements OnInit {

  src: any;
  title;
  zoom_to = 1;

  @ViewChild(CustomPdfViewerComponent) private pdfComponent: CustomPdfViewerComponent | undefined;
  searchText = '';
  pdfFindController: any;
  data: any;
  selectedDate: any;

  constructor(public dialogRef: MatDialogRef<CustomPdfViewerComponent>,
    @Inject(MAT_DIALOG_DATA) data: any, private spinnerService: NgxSpinnerService) {
    this.pdfDocumentSrc = data.pdfData;
    this.title = data.title;
    this.selectedDate = data.selectedDate;
    setTimeout(() => {
      // this.loaderService.display(false);
    }, 1000);
  }

  applyFilter(event: string, findPrevious?: boolean | undefined) {
    console.log(event);
    const filterValue = event;
    if (this.pdfComponent) {
      if (this.searchText !== filterValue) {
        this.searchText = filterValue;

        this.pdfComponent.pdfFindController.executeCommand('find', {
          query: this.searchText,
          highlightAll: true
        });
      } else {
        this.searchText = filterValue;
        this.pdfComponent.pdfFindController.executeCommand('findagain', {
          query: this.searchText,
          highlightAll: true,
          findPrevious: findPrevious ? this.searchText : undefined
        });
      }
    }
  }


  onKeyDownHandler(event: { target: { value: string; }; }) {
    this.applyFilter(event.target.value);
  }

  onDescClick() {
    this.applyFilter(this.searchText);
  }

  onAscClick() {
    this.applyFilter(this.searchText, true);
  }

  onInputChange(event: { target: { value: string; }; }) {
    this.applyFilter(event.target.value);
  }

  pdfDocumentSrc: any;
  page: number = 1;
  totalPages: number = 0;
  isLoaded: boolean = false;

  afterLoadComplete(pdfData: any) {
    this.totalPages = pdfData.numPages;
    this.isLoaded = true;
  }

  nextPage() {
    this.page++;
  }

  prevPage() {
    this.page--;
  }

  ngOnInit(): void {
  }

  close() {
    this.dialogRef.close();
  }

  zoom_in() {
    this.zoom_to = this.zoom_to + 0.25;
  }

  zoom_out() {
    if (this.zoom_to > 0.25) {
      this.zoom_to = this.zoom_to - 0.25;
    }
  }
  // downloadPDF() {

  //   // Construct the API URL with the selected date
  //   const apiUrl = `http://localhost:9090/api/bill?date=${this.selectedDate}`;

  //   // Make a GET request to the API endpoint to download the PDF
  //   fetch(apiUrl, {
  //     method: 'GET',
  //   })
  //     .then(response => {
  //       // Check if the response is successful
  //       if (!response.ok) {
  //         throw new Error('Network response was not ok');
  //       }
  //       return response.blob(); // Extract the binary data from the response
  //     })
  //     .then(blob => {
  //       // Create a blob URL for the PDF
  //       const url = window.URL.createObjectURL(blob);

  //       // Create a temporary <a> element to trigger the download
  //       const a = document.createElement('a');
  //       a.href = url;
  //       a.download = `${this.selectedDate}.pdf`; // Set filename with date
  //       document.body.appendChild(a);
  //       a.click();

  //       // Clean up by revoking the blob URL and removing the <a> element
  //       window.URL.revokeObjectURL(url);
  //       document.body.removeChild(a);
  //     })
  //     .catch(error => {
  //       // Handle any errors
  //       console.error('Error downloading PDF:', error);
  //     });
  // }
}

getPDFData(fileName: string | number | boolean): Observable<any> {
    const param = new HttpParams().set("fileName", fileName);
    return this.http.post('http://localhost:9090/pdfData', null, {
      responseType: "arraybuffer",
      params:param,
      headers: new HttpHeaders().append("Content-Type", "application/pdf"),
    });
  }

 "ng2-pdf-viewer": "^10.0.0",
    "ngx-pagination": "^6.0.3",
    "ngx-spinner": "^16.0.2",


public class DBConfig {

    private static String url = "";
    private static String username = "";
    private static String password = "";
    private static String driver = "";
    private static boolean flag = false;

    public DBConfig() {
        configureProperties();
    }

    private void configureProperties() {
        if (!flag) {
            try (InputStream input = DBConfig.class.getClassLoader().getResourceAsStream("application.properties")) {
                Properties prop = new Properties();
                // load a properties file
                prop.load(input);
                url = prop.getProperty("spring.datasource.url");
                username = prop.getProperty("spring.datasource.username");
                password = prop.getProperty("spring.datasource.password");
                driver = prop.getProperty("spring.datasource.driver-class-name");
                flag = true;
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }

    }

    public static Connection getConnection() throws ClassNotFoundException, SQLException {
        Connection connection = null;
        Class.forName(driver);
        connection = DriverManager.getConnection(url, username, password);
        return connection;
    }

}

  @PostMapping("/kharch")
    public void receiveExpenses(@RequestBody List<kharch> expenses) {
        for (kharch expense : expenses) {
            expense.setDate(expense.getDate()); // Set the date
            expense.setNotes(expense.getNotes()); // Set the notes
            expense.setPrice(expense.getPrice());
            System.out.println(expense);
            kharchRepository.save(expense);
        }
    }

 total = 0;
  selectedDate!: Date | null;
  purchaDipStockseDetails: any = {
    date: ''
  };
  // row = [
  //   {
  //     id: '',
  //     date: this.purchaDipStockseDetails.date,
  //     notes: '',
  //     price: '',
  //   },
  // ];

  constructor(private http: HttpClient) {
  }

  ngOnInit() {
    this.row[0].idkharch = '1';
  }
  order() {
    const data = {
      // date: this.purchaDipStockseDetails.date,
      expenses: this.row
    };



    // Send data to backend
    this.http.post<any>('http://localhost:9090/kharch', this.row)
      .subscribe(response => {
        // const responseData = response.expenses;
        this.purchaDipStockseDetails.date = null;
        this.row = [];
      });
  }
  purchaseDetails: any = {
    date: '' // You can set default date if needed
  };
  row: any[] = [];
  lastRowId: number = 0;

  addTable() {
    // Add a new row to the table
    this.lastRowId++;
    // this.row.push({ id: '', date: this.purchaDipStockseDetails.date, notes: '', price: '' });
    const newRow = { idkharch: this.lastRowId,  date: this.purchaDipStockseDetails.date,notes: '', price: '' };
    this.row.push(newRow);
  }

  deleteRow(index: number) {
    // Remove a row from the table
    this.row.splice(index, 1);
  }
}

/////////////////////jama baki componenet
<input type="date" [(ngModel)]="purchaDipStockseDetails.date">

<div style="display:inline;width:100%">
    <div style="display:inline;">
        <button (click)="addTable()">Add Row</button>
    </div>
    <div style="display:inline;margin-left:45%">
        <button (click)="order()">Order</button>
    </div>
</div>
<br />
<table class="style">
    <tr>
        <th style="max-width:60px">RowId</th>
        <th>Sender</th>
        <th>Receiver</th>
        <th>Amount</th>
        <th></th>
    </tr>
    <tr *ngFor="let item of row; let i = index">
        <td><input type="text" [(ngModel)]="item.idkharch" /></td>
        <td><input type="text" [(ngModel)]="item.sender" /></td>
        <mat-form-field style="margin-top: 4%; background-color: rgb(252, 252, 252);">
            <mat-label>Receiver</mat-label>
            <mat-select  [(ngModel)]="item.receiver">
                <mat-option *ngFor="let name of names" [value]="name">
                    {{ name }}
                </mat-option>
            </mat-select>
        </mat-form-field>
        <td><input type="text" [(ngModel)]="item.amount" /></td>
        <td>
            <button (click)="deleteRow(i)"><i class="fa fa-trash"></i></button>
        </td>
    </tr>
    <tr>
        GrandTotal:
        <input type="text" />
    </tr>
</table>

export class SendmoneyComponent {
  total = 0;
  selectedDate!: Date | null;
  purchaDipStockseDetails: any = {
    date: ''
  };
  // row = [
  //   {
  //     id: '',
  //     date: this.purchaDipStockseDetails.date,
  //     notes: '',
  //     price: '',
  //   },
  // ];

  constructor(@Inject(MAT_DIALOG_DATA) public data: any,
    private http: HttpClient,
    private use: ServicesService,
    private dialog: MatDialog,
  ) {
    console.log(data);

  }


  ngOnInit() {
    this.getdata();
    // this.row[0].idkharch = '1';
  }
  names: any[] = [];
  getdata() {
    this.http.get<any>('http://localhost:9090/Customerall')
      .subscribe(response => {
        this.names = Object.values(response).map((item: any) => item.name);
      });
  }



  // addTable() {
  //   console.log(this.row.length);
  //   const obj = {
  //     id: '',
  //     date: this.purchaDipStockseDetails.date,
  //     notes: '',
  //     price: '',
  //   };

  //   this.row.push(obj);
  //   this.row[this.row.length - 1].id = this.row.length.toString();
  // }

  // deleteRow(x: number) {
  //   var delBtn = confirm(' Do you want to delete ?');
  //   if (delBtn == true) {
  //     this.row.splice(x, 1);
  //   }
  // }

  order() {
    const data = {
      // date: this.purchaDipStockseDetails.date,
      expenses: this.row
    };

    console.log(this.row);


    // Send data to backend
    this.http.post<any>('http://localhost:9090/jamabakiadd', this.row)
      .subscribe(response => {
        // const responseData = response.expenses;
        this.purchaDipStockseDetails.date = null;
        this.row = [];
      });
  }
  purchaseDetails: any = {
    date: '' // You can set default date if needed
  };
  row: any[] = [];
  lastRowId: number = 0;

  addTable() {
    // Add a new row to the table
    this.lastRowId++;
    // this.row.push({ id: '', date: this.purchaDipStockseDetails.date, notes: '', price: '' });
    const newRow = { idkharch: this.lastRowId, date: this.purchaDipStockseDetails.date, sender: this.data.name, receiver: this.names, amount: '' };
    this.row.push(newRow);
  }

  deleteRow(index: number) {
    // Remove a row from the table
    this.row.splice(index, 1);
  }
  dataSource = [

  ];
}
  @PostMapping("/jamabakiadd")
    public void receivejamabakiadd(@RequestBody List<jamabaki> expenses) {
        for (jamabaki expense : expenses) {
            expense.setDate(expense.getDate()); // Set the date
            expense.setSender(expense.getSender()); // Set the notes
            expense.setReceiver(expense.getReceiver());
            expense.setAmount(expense.getAmount());
            System.out.println(expense.toString());
            JamabakiRepository.save(expense);
        }
    }
/////////////
<mat-form-field>
                <input matInput [(ngModel)]="purchaDipStockseDetails.date" type="date" (change)="updateDate()">
              </mat-form-field>

//////////////////
updateDate() {
    // Update the date field in each row with the selected date
    this.row.forEach(row => {
      row.date = this.purchaDipStockseDetails.date;
    });
  }
 purchaDipStockseDetails = {
    date: ''
  };

  row = [
    {
      type: 'Petrol',
      quantity: '',
      total: '',
      vat: '',
      cess: '',
      total_purchase: '',
      date: ''
    },
    {
      type: 'Diesel',
      quantity: '',
      total: '',
      vat: '',
      cess: '',
      total_purchase: '',
      date: ''
    }
  ];

/////////////////////
SELECT * FROM practice.dailytotal
WHERE date = DATE_FORMAT(CURDATE(), '%d/%m/%Y');

SELECT SUM(total_rs) AS total_sum
FROM practice.dailytotal
WHERE MONTH(STR_TO_DATE(date, '%d/%m/%Y')) = MONTH(CURDATE());


SELECT * FROM practice.dailytotal
where YEAR(STR_TO_DATE(date, '%d/%m/%Y')) = YEAR(CURDATE());

SELECT SUM(total_rs) AS total_sum FROM practice.dailytotal
where YEAR(STR_TO_DATE(date, '%d/%m/%Y')) = YEAR(CURDATE());
/////////////

@Query("SELECT p.volume FROM practicedip p WHERE p.id = :id")
    Double findVolumeById(@Param("id") Integer id);

////

@GetMapping("/practicedip/{id}")
    public Double getPracticedipById(@PathVariable("id") Integer id) {
        // Fetch volume by id using the repository method
        Double volume = practicedipRepository.findVolumeById(id);
        return volume;
    }

//////////////
<input type="date" [(ngModel)]="date">
<div class="box">
    <div class="container">
        <img class="logo" src="">
        <form #userForm="ngForm" class="input-field">
            <div class="input-row">
                <input type="text" class="input" placeholder="Pdip" [(ngModel)]="pdip" (change)="fetchPvalue()"
                    name="pdip">
                <input type="text" class="input" placeholder="Ptotal" [(ngModel)]="ptotal" name="ptotal">
                <input type="text" class="input" placeholder="Pvalue" [ngModel]="pvalue" name="pvalue" readonly>
            </div>
            <div class="input-row">
                <input type="text" class="input" placeholder="Ddip" [(ngModel)]="dieseldip" (change)="fetchDvalue()"
                    name="dieseldip">
                <input type="text" class="input" placeholder="Dtotal" [(ngModel)]="dtotal" name="dtotal">
                <input type="text" class="input" placeholder="Dvalue" [ngModel]="dvalue" name="dvalue" readonly>
            </div>
            <button class="add"> Add Member </button>
        </form>
    </div>
</div>
/////////////////////

pvalue: number | undefined;
  dvalue: number | undefined;
  private apiUrl = 'http://localhost:9090';
 fetchPvalue(): void {
    if (this.pdip) {
      this.http.get<number>(`${this.apiUrl}/practicedip/${this.pdip}`).subscribe(
        (data: number) => {
          this.pvalue = data;
          console.log('Pvalue:', this.pvalue);
        },
        (error) => {
          console.error('Error fetching Pvalue', error);
        }
      );
    }
  }

  fetchDvalue(): void {
    if (this.dieseldip) {
      this.http.get<number>(`${this.apiUrl}/practicedip/${this.dieseldip}`).subscribe(
        (data: number) => {
          this.dvalue = data;
          console.log('Dvalue:', this.dvalue);
        },
        (error) => {
          console.error('Error fetching Dvalue', error);
        }
      );
    }
  }
////////////////////
export class EmployeeFormComponent {

  name!: string;
  accountNumber!: string;
  employeeId!: string;
  photo!: File;
  private apiUrl = 'http://localhost:9090/employees'; // Replace with your backend URL

  constructor(private http: HttpClient) { }

  onFileChange(event: any) {
    this.photo = event.target.files[0];
  }

  saveEmployee(formValues: any): void {
    const formData = new FormData();
    formData.append('name', this.name);
    formData.append('accountNumber', this.accountNumber);
    formData.append('employeeId', this.employeeId);
    formData.append('photo', this.photo);
    console.log(formData);

    this.http.post(`${this.apiUrl}`, formData).subscribe(
      (response) => {
        console.log('Employee saved successfully', response);
      },
      (error) => {
        console.error('Error saving employee', error);
      }
    );
  }
}
////
.container {
    max-width: 600px;
    margin: 0 auto;
    padding: 20px;
    border: 1px solid #ccc;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    background-color: #f9f9f9;
  }
  
  h2 {
    text-align: center;
    margin-bottom: 20px;
  }
  
  .form-group {
    margin-bottom: 15px;
  }
  
  .form-group label {
    display: block;
    margin-bottom: 5px;
    font-weight: bold;
  }
  
  .form-group input {
    width: 100%;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 5px;
    font-size: 16px;
  }
  
  .form-group input[type="file"] {
    padding: 3px;
  }
  
  .btn {
    display: block;
    width: 100%;
    padding: 10px;
    border: none;
    border-radius: 5px;
    background-color: #007bff;
    color: white;
    font-size: 16px;
    cursor: pointer;
    margin-top: 10px;
  }
  
  .btn:hover {
    background-color: #0056b3;
  }
  ///////////////////
<div class="container">
    <h2>Add Employee</h2>
    <form #employeeForm="ngForm" (ngSubmit)="saveEmployee(employeeForm.value)">
        <div class="form-group">
            <label for="name">Name</label>
            <input type="text" id="name" class="form-control" [(ngModel)]="name" name="name" required>
        </div>
        <div class="form-group">
            <label for="accountNumber">Account Number</label>
            <input type="text" id="accountNumber" class="form-control" [(ngModel)]="accountNumber" name="accountNumber" required>
        </div>
        <div class="form-group">
            <label for="id">ID</label>
            <input type="text" id="id" class="form-control" [(ngModel)]="employeeId" name="employeeId" required>
        </div>
        <div class="form-group">
            <label for="photo">Photo</label>
            <input type="file" id="photo" class="form-control" (change)="onFileChange($event)" name="photo" required>
        </div>
        <button type="submit" class="btn btn-primary">Save Employee</button>
    </form>
</div>
//////////////////

 @PostMapping("/employees")
    public Employee createEmployee(@RequestParam("name") String name,
            @RequestParam("accountNumber") String accountNumber,
            @RequestParam("employeeId") String employeeId,
            @RequestParam("photo") MultipartFile photo) throws Exception {
        Employee employee = new Employee();
        employee.setName(name);
        employee.setAccountNumber(accountNumber);
        employee.setEmployeeId(employeeId);
        employee.setPhoto(photo.getBytes());
        return employeeRepository.save(employee);
    }

    @GetMapping("/employeesdata")
    public List<Employee> getAllEmployees() {
        return employeeRepository.findAll();
    }
///////////
.table {
    width: 100%;
    /* border-collapse: collapse; */
  }
  
  .table th, .table td {
    padding: 8px;
    text-align: left;
    border-bottom: 1px solid #ddd;
  }
  
  .table th {
    background-color: #f2f2f2;
    color: #333;
  }
  
  ////////////////
<button (click)="openComponent() ">Open Demo</button>
<button (click)="openEmployee()">Employee</button>
<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-fuel-pump-diesel"
    viewBox="0 0 16 16">
    <path
        d="M3.5 2a.5.5 0 0 0-.5.5v5a.5.5 0 0 0 .5.5h5a.5.5 0 0 0 .5-.5v-5a.5.5 0 0 0-.5-.5zM4 14V9h1.796q.75 0 1.237.293t.725.85Q8 10.7 8 11.487q0 .792-.242 1.355a1.8 1.8 0 0 1-.732.861Q6.54 14 5.796 14zm1.666-4.194h-.692v3.385h.692q.343 0 .595-.103a1 1 0 0 0 .412-.315q.162-.213.241-.528.084-.314.083-.74 0-.565-.144-.94a1.1 1.1 0 0 0-.436-.569q-.293-.19-.75-.19Z" />
    <path
        d="M3 0a2 2 0 0 0-2 2v13H.5a.5.5 0 0 0 0 1h11a.5.5 0 0 0 0-1H11v-4a1 1 0 0 1 1 1v.5a1.5 1.5 0 0 0 3 0V8h.5a.5.5 0 0 0 .5-.5V4.324c0-.616 0-1.426-.294-2.081a1.97 1.97 0 0 0-.794-.907Q14.345.999 13.5 1a.5.5 0 0 0 0 1c.436 0 .716.086.9.195a.97.97 0 0 1 .394.458c.147.328.19.746.201 1.222H13.5a.5.5 0 0 0-.5.5V7.5a.5.5 0 0 0 .5.5h.5v4.5a.5.5 0 0 1-1 0V12a2 2 0 0 0-2-2V2a2 2 0 0 0-2-2zm7 2v13H2V2a1 1 0 0 1 1-1h6a1 1 0 0 1 1 1" />
</svg>
<div>
    <h2>Employee List</h2>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Account Number</th>
                <th>Employee ID</th>
                <th>Photo</th>
            </tr>
        </thead>
        <tbody>
            <tr *ngFor="let employee of employees">
                <td>{{ employee.id }}</td>
                <td>{{ employee.name }}</td>
                <td>{{ employee.accountNumber }}</td>
                <td>{{ employee.employeeId }}</td>
                <td>
                    <img id="myimage" [src]="thumbnail" alt="Employee Photo"  style="width: 50px; height: 50px;"/>

                </td>
            </tr>
        </tbody>
    </table>
</div>

//////////////
 employees!: Employee[];
  constructor(
    private http: HttpClient,
    private use: ServicesService,
    private dialog: MatDialog,
    private sanitizer: DomSanitizer,// private pipe: FilterPipe
  ) { }

  thumbnail!: SafeUrl;
  ngOnInit(): void {
    this.loadEmployees();
  }
  openComponent() {
    const dialogRef = this.dialog.open(DipReportComponent, {
      maxWidth: '100%',
      maxHeight: '100%',
      width: '60%',
      height: '50%',
    });

  }
  openEmployee() {
    const dialogRef = this.dialog.open(EmployeeFormComponent, {
      maxWidth: '100%',
      maxHeight: '100%',
      width: '60%',
      height: '50%',
    });
  }

  // loadEmployees(): void {
  //   this.http.get<any>('http://localhost:9090/employeesdata') // Replace with your API URL
  //     .subscribe(
  //       data => {
  //         // this.employees = data;
  //         // console.log(data);
  //         // this.photo_url(data);
  //         let objectURL = 'data:image/jpeg;base64,' + data.photo;

  //         this.thumbnail = this.sanitizer.bypassSecurityTrustUrl(objectURL);
  //       },
  //       error => {
  //         console.error('Error fetching employees', error);
  //       }
  //     );
  // }
  loadEmployees(): void {
    this.http.get<any>('http://localhost:9090/employeesdata')
      .subscribe(
        (res: any) => {
          this.employees = res;
          // Assuming res.photo is base64 encoded string
          let objectURL = 'data:image/jpeg;base64,' + res[0].photo;
          this.thumbnail = this.sanitizer.bypassSecurityTrustUrl(objectURL);
        },
        error => {
          console.error('Error fetching employees', error);
        }
      );
  }
  bin2string(array: any) {
    var result = "";
    for (var i = 0; i < array.length; ++i) {
      result += (String.fromCharCode(array[i]));
    }
    return result;
  }

  isFile(obj: any): obj is File {
    return obj instanceof File;
  }

  isBlob(obj: any): obj is Blob {
    return obj instanceof Blob;
  }
  image: any[] = [];

  getPhotoUrl(employee: Employee): any {
    if (this.isFile(employee.photo)) {
      const reader = new FileReader();
      reader.readAsDataURL(employee.photo);
      return new Promise<string>((resolve) => {
        reader.onload = () => {
          resolve(reader.result as string);
        };
      });
    } else if (this.isBlob(employee.photo)) {
      const photoBlob = new Blob([employee.photo], { type: 'image/jpeg' }); // Adjust type as per your image format
      return window.URL.createObjectURL(photoBlob);
    } else {

      // let objectURL = URL.createObjectURL(new Blob([employee.photo], { type: 'image/jpeg' }));
      // this.image = this.sanitizer.bypassSecurityTrustUrl(objectURL);
      // const photoBlob = new Blob([employee.photo], { type: 'image/jpeg' }); // Adjust type as per your image format
      // return window.URL.createObjectURL(photoBlob);
      // return '';
    }
  }


  user_photo!: SafeResourceUrl;
  photo_url(data: string) {
    this.user_photo = this.sanitizer.bypassSecurityTrustResourceUrl(
      'data:image/jpeg;base64,' + new Blob([data], { type: 'image/jpeg' }));
  }
}

////////////
export interface Employee {
    id?: number; // Optional if you're creating a new employee
    name: string;
    accountNumber: string;
    employeeId: string;
    photo: string; // Photo as a File object
  }



////////////////////////////
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { MatDialog } from '@angular/material/dialog';
import 'bootstrap-notify';

declare var $: any;

const type = ['', 'info', 'success', 'warning', 'danger', 'rose', 'primary'];
enum NotificationType { defualt, info, success, warning, danger, rose, primary };

@Injectable({
  providedIn: 'root'
})
export class NotificationService {
  timer: number;

  constructor(private dialog: MatDialog) { }

  success(message: string, seconds?: number) {
    this.showNotification("top", "right", type[NotificationType.success], message, seconds);
  }

  warning(message: string, seconds?: number) {
    this.showNotification("top", "right", type[NotificationType.warning], message, seconds);
  }

  failure(message: string, seconds?: number) {
    this.showNotification("top", "right", type[NotificationType.danger], message, seconds);
  }

  private showNotification(from: string, align: string, type: string, message: string, timer: number) {
    this.timer = timer > 0 ? timer : 2;

    $.notify({
      icon: 'notifications',
      message: message,
    }, {
      type: type,
      delay: this.timer * 1000,
      placement: {
        from: from,
        align: align
      },
      template: `<div data-notify="container" class="col-xs-11 col-sm-3 alert alert-{0} alert-with-icon" role="alert">
        <button mat-raised-button type="button" aria-hidden="true" class="close" data-notify="dismiss"><i class="material-icons">close</i></button>
        <i class="material-icons" data-notify="icon">notifications</i>
        <span data-notify="title">{1}</span>
        <span data-notify="message" style="word-break: break-word;">{2}</span>
        <div class="progress" data-notify="progressbar">
          <div class="progress-bar progress-bar-{0}" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" style="width: 0%;"></div>
        </div>
        <a href="{3}" target="{4}" data-notify="url"></a>
      </div>`
    });
  }
}
////////////////////////////
import { TestBed } from '@angular/core/testing';

import { NotificationService } from './notification.service';

describe('NotificationService', () => {
  let service: NotificationService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(NotificationService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});


//////////////////
import { Injectable } from '@angular/core';
import { NgxSpinnerService } from 'ngx-spinner';
import { BehaviorSubject } from 'rxjs';
declare const $: any;

@Injectable({
  providedIn: 'root'
})
export class LoaderService {
  initialLoader = true;

  constructor(private spinnerService: NgxSpinnerService) { }

  public status: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);

  display(value: boolean) {
    if (value) {
      this.spinnerService.show();
    } else {
      this.spinnerService.hide();
    }
    this.status.next(value);
  }
}

///////////////////
import { TestBed } from '@angular/core/testing';

import { LoaderService } from './loader.service';

describe('LoaderService', () => {
  let service: LoaderService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(LoaderService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});
///////////////////
<router-outlet>
    <!-- <div *ngIf="showLoader" class="sk" [@loaderInOut]>
        <div class="spinner">
            <div class="bounce1"></div>
            <div class="bounce2"></div>
            <div class="bounce3"></div>
        </div>
    </div> -->
    <ngx-spinner size="medium" [type]="typeSelected" [bdColor]="color" [@loaderInOut]></ngx-spinner> -->
    <!-- <ngx-spinner bdColor="rgba(0, 0, 0, 0.8)" size="medium" color="#fff" type="ball-clip-rotate"></ngx-spinner> -->
</router-outlet>

//////////////
openDatabaseDialog(data: any): void {
    const dialogRef = this.dialog.open(DatabaseConfigDetailsComponent, {
      width: '70%',
      height: '60%',
      disableClose: true,
      data: data
    });

    dialogRef.afterClosed().subscribe(result => {
      if (result.isReload) {
        this.fetchServerList();
        this.getDataBaseList();
      }
    });
  }
/////////////
  isReload: boolean;
cancel() {
    this.dialogRef.close({ 'isReload': this.isReload });
  }
