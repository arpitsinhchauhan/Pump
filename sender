@GetMapping(value = "/api/bill", produces = MediaType.APPLICATION_PDF_VALUE)
    public ResponseEntity<byte[]> getBill(@RequestParam("date") @DateTimeFormat(pattern = "yyyy-MM-dd") Date date) throws IOException, JRException {
        List<Object[]> data = Table1Repository.getDataForDate(date); // Fetch data based on the provided date
        //pendingamout //given amount
        byte[] reportBytes = generateReport(data, date); // Pass fetched data to the generateReport method
        return ResponseEntity.ok().contentType(MediaType.APPLICATION_PDF).body(reportBytes);
    }

    private byte[] generateReport(List<Object[]> data, Date date) throws IOException, JRException {
        ByteArrayOutputStream outputStream = null;
        try {
            JasperReport jasperReport = (JasperReport) JRLoader.loadObjectFromFile("D:/report1.jasper");

            // Create a map to hold the parameters (including the fetched data)
            Map<String, Object> parameters = new HashMap<>();
            SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
            String formattedDate = dateFormat.format(date);
            parameters.put("Date", formattedDate);
            String jsonData = new ObjectMapper().writeValueAsString(data);
//            if (!data.isEmpty() && data.get(0).length > 0) {
//                parameters.put("prate", data.get(0)[0]);
//            } else {
//                // Handle case when data is empty or first array has no elements
//                parameters.put("prate", null); // Or provide a default value
//            }
            parameters.put("pltr", data.get(0)[2]);
            parameters.put("prate", data.get(0)[3]);
            parameters.put("dltr", data.get(0)[4]);
            parameters.put("drate", data.get(0)[5]);
            parameters.put("oprice", data.get(0)[7]);

            double psum = 0.0;
            double dsum = 0.0;

// Assuming data.get(0) exists and is a double array with at least 8 elements
            if (data.get(0).length >= 8) {
                // Extract values from data array and put them into parameters map
                parameters.put("pltr", Double.parseDouble((String) data.get(0)[2]));
                parameters.put("prate", Double.parseDouble((String) data.get(0)[3]));
                parameters.put("dltr", Double.parseDouble((String) data.get(0)[4]));
                parameters.put("drate", Double.parseDouble((String) data.get(0)[5]));

                // Calculate the sum of the values using a loop
                for (int i = 2; i <= 3; i++) {
                    psum += Double.parseDouble((String) data.get(0)[i]);
                }
                for (int i = 4; i <= 5; i++) {
                    dsum += Double.parseDouble((String) data.get(0)[i]);
                }
            }

            parameters.put("ptotal", psum);
            parameters.put("dtotal", dsum);
            double oprice = Double.parseDouble((String) data.get(0)[7]);

            double mtotal = psum + dsum + oprice;
            parameters.put("mtotal", mtotal);
//            List<Map<String, Object>> jama = getSumAmountAndDateBySenderPump();
//            parameters.put("jama", jama);
//            List<Map<String, Object>> receiver = getJamabakiByReceiverPump();
//            parameters.put("baki", receiver);
            List<Map<String, Object>> jama = getSumAmountAndDateBySenderPump();
            List<String> sumDataList = new ArrayList<>();
            for (int i = 0; i < jama.size(); i++) {
                Map<String, Object> obj = jama.get(i);
                if (obj.values().contains(formattedDate)) {
                    Object sumData = obj.get("sum");
                    if (sumData != null && sumData instanceof String) {
                        // Check if sumData is not null and of type String before adding it to the list
                        sumDataList.add((String) sumData);
                    }
                }
            }
            parameters.put("jama", sumDataList);

            List<Map<String, Object>> receiver = getJamabakiByReceiverPump();
            List<String> sumDatabaki = new ArrayList<>();
            for (int i = 0; i < receiver.size(); i++) {
                Map<String, Object> obj = receiver.get(i);
                if (obj.values().contains(formattedDate)) {
                    Object sumData = obj.get("sum");
                    if (sumData != null && sumData instanceof String) {
                        // Check if sumData is not null and of type String before adding it to the list
                        sumDatabaki.add((String) sumData);
                    }
                }
            }
            parameters.put("baki", sumDatabaki);

            List<Object[]> kharch = getKharchData();
            List<Double> sumDatakharch = new ArrayList<>();
//            List<String> sumDatabaki = new ArrayList<>();
            for (int i = 0; i < kharch.size(); i++) {
                Object[] obj = kharch.get(i);
                if (obj[0] != null && obj[0].equals(formattedDate)) {
                    // Assuming the sum data is stored at index 1 in the array
                    Object sumData = obj[1];
                    if (sumData instanceof Double) {
                        // Check if sumData is of type Double before adding it to the list
                        sumDatakharch.add((Double) sumData);
                    }
                }
            }
            parameters.put("kharch", sumDatakharch);
            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters, new JREmptyDataSource());
            outputStream = new ByteArrayOutputStream();
            JasperExportManager.exportReportToPdfStream(jasperPrint, outputStream);
        } catch (JRException ex) {
            logger.error("some error occurred ::", ex);
        }

        return outputStream.toByteArray();
    }
 
 @PostMapping("/jamabakiadd")
    public void receivejamabakiadd(@RequestBody List<jamabaki> expenses) {
        for (jamabaki expense : expenses) {
            expense.setDate(expense.getDate()); // Set the date
            expense.setSender(expense.getSender()); // Set the notes
            expense.setReceiver(expense.getReceiver());
            expense.setAmount(expense.getAmount());
            System.out.println(expense.toString());
            JamabakiRepository.save(expense);
        }
    }
 
 @GetMapping("/jamabaki/senderPump")
    public List<Map<String, Object>> getSumAmountAndDateBySenderPump() {
        List<Object[]> result = JamabakiRepository.sumAmountAndDateBySenderContainingIgnoreCase("Pump");

        // Prepare a list to hold the results
        List<Map<String, Object>> response = new ArrayList<>();

        // Create a SimpleDateFormat instance with the desired format
        SimpleDateFormat inputFormat = new SimpleDateFormat("yyyy-MM-dd"); // Adjust the pattern based on your actual date format
        SimpleDateFormat outputFormat = new SimpleDateFormat("dd/MM/yyyy");

        // Iterate through the fetched data
        for (Object[] row : result) {
            Map<String, Object> entry = new HashMap<>();
            try {
                // Assuming the date is stored in the first column as a string
                String dateString = (String) row[0];
                // Parse the date string into a Date object
                Date date = inputFormat.parse(dateString);
                // Format the date using the output format
                String formattedDate = outputFormat.format(date);
                entry.put("date", formattedDate);
                entry.put("sum", row[1]); // Assuming the sum of amounts is stored in the second column
                response.add(entry);
            } catch (ParseException e) {
                // Handle parsing exception
                e.printStackTrace();
                // Skip this row if parsing fails
                continue;
            }
        }

        return response;
    }

    @GetMapping("/jamabaki/receiverPump")
    public List<Map<String, Object>> getJamabakiByReceiverPump() {
        List<Object[]> result = JamabakiRepository.sumAmountAndDateByReceiverContainingIgnoreCase("Pump");

        // Prepare a list to hold the results
        List<Map<String, Object>> response = new ArrayList<>();
        SimpleDateFormat inputFormat = new SimpleDateFormat("yyyy-MM-dd");
        SimpleDateFormat outputFormat = new SimpleDateFormat("dd/MM/yyyy");
        // Iterate through the fetched data
        for (Object[] row : result) {
            Map<String, Object> entry = new HashMap<>();
            try {
                // Assuming the date is stored in the first column as a string
                String dateString = (String) row[0];
                // Parse the date string into a Date object
                Date date = inputFormat.parse(dateString);
                // Format the date using the output format
                String formattedDate = outputFormat.format(date);
                entry.put("date", formattedDate);
                entry.put("sum", row[1]); // Assuming the sum of amounts is stored in the second column
                response.add(entry);
            } catch (ParseException e) {
                // Handle parsing exception
                e.printStackTrace();
                // Skip this row if parsing fails
                continue;
            }
        }

        return response;
    }

    @GetMapping("/kharch")
    public List<Object[]> getKharchData() {
        List<Object[]> dateAndTotalPriceList = kharchRepository.findDateAndTotalPrice();
        List<Object[]> formattedDataList = new ArrayList<>();
        SimpleDateFormat inputFormat = new SimpleDateFormat("yyyy-MM-dd");
        SimpleDateFormat outputFormat = new SimpleDateFormat("dd/MM/yyyy");
        for (Object[] row : dateAndTotalPriceList) {
            try {
                // Assuming the first element is the date
                Date date = inputFormat.parse(row[0].toString());
                String formattedDate = outputFormat.format(date);
                // Replace the date in the row with the formatted date
                row[0] = formattedDate;
            } catch (ParseException e) {
                e.printStackTrace();
                // Handle parsing exception if necessary
            }

            formattedDataList.add(row);
        }

        // Print the formatted data if needed
        for (Object[] row : formattedDataList) {
            System.out.println("Date: " + row[0] + ", Total Price: " + row[1]);
        }

        return formattedDataList;
    }
    ////////////////////////////////////////////////

    @Repository
public interface jamabakiRepository extends JpaRepository<jamabaki, Integer> {

    @Query("SELECT j.date, SUM(j.amount) FROM jamabaki j WHERE j.sender LIKE %:sender% GROUP BY j.date")
    List<Object[]> sumAmountAndDateBySenderContainingIgnoreCase(@Param("sender") String sender);

    @Query("SELECT j.date, SUM(j.amount) FROM jamabaki j WHERE j.receiver LIKE %:receiver% GROUP BY j.date")
    List<Object[]> sumAmountAndDateByReceiverContainingIgnoreCase(@Param("receiver") String receiver);
//    @Query("SELECT SUM(j.amount) FROM jamabaki j WHERE j.receiver LIKE %:receiver%")
//    Double sumAmountByReceiverContainingIgnoreCase(@Param("receiver") String receiver);

//    @Query("SELECT j FROM jamabaki j WHERE j.receiver LIKE %:receiver%")
//    List<jamabaki> findByReceiverContainingIgnoreCase(@Param("receiver") String receiver);
////////////////////////////////////////
@Repository
public interface kharchRepository extends JpaRepository<kharch, Integer> {

    @Query(value = "SELECT date, SUM(price) AS total_price FROM kharch GROUP BY date", nativeQuery = true)
    List<Object[]> findDateAndTotalPrice();
}
}
///////////////////
  @GetMapping("/dateRange")
    public ResponseEntity<List<dailytotal>> getEntriesWithinDateRange(
            @RequestParam("startDate") String startDate,
            @RequestParam("endDate") String endDate) {

        List<dailytotal> entries = DailytotalRepository.findByDateBetween(startDate, endDate);

        return new ResponseEntity<>(entries, HttpStatus.OK);
    }
//////////////
@Query("SELECT d FROM dailytotal d WHERE d.date BETWEEN :startDate AND :endDate")
    List<dailytotal> findByDateBetween(String startDate, String endDate);

////////////
<input type="date" [(ngModel)]="startDate">
<input type="date" [(ngModel)]="endDate">
<button (click)="fetchData()">Fetch Data</button>
<div *ngFor="let dailyTotal of dailyTotals">
    <p>Date: {{ dailyTotal.date }}</p>
    <p>Total RS: {{ dailyTotal.total_rs }}</p>
</div>
<p>Total Sum of Total RS: {{ getTotalRsSum() }}</p>

//////////////////////
dailyTotals: DailyTotal[] = [];
  startDate: string = ''; // Initialize to empty string
  endDate: string = '';

 fetchData(): void {
    if (!this.startDate || !this.endDate) {
      // Handle case when either start or end date is not selected
      return;
    }
    const formattedStartDate = this.formatDate(this.startDate);
    const formattedEndDate = this.formatDate(this.endDate);

    this.use.getDailyTotals(formattedStartDate, formattedEndDate)
      .subscribe(data => {
        this.dailyTotals = data;
      });
  }
  formatDate(date: string): string {
    // Split the date string by '-' to get day, month, and year
    const parts = date.split('-');
    if (parts.length !== 3) {
      // Invalid date format
      console.error('Invalid date format.');
      return '';
    }

    // Re-arrange the parts and join them with '/'
    return `${parts[2]}/${parts[1]}/${parts[0]}`;
  }


  getTotalRsSum(): number {
    return this.dailyTotals.reduce((sum, dailyTotal) => sum + dailyTotal.total_rs, 0);
  }

///

export interface DailyTotal {
    date: string;
    total_rs: number;
  }
  ////////////////
 private apiUrladd = 'http://localhost:9090/dateRange';


  getDailyTotals(startDate: string, endDate: string): Observable<DailyTotal[]> {
    const params = new HttpParams()
      .set('startDate', startDate)
      .set('endDate', endDate);

    return this.http.get<DailyTotal[]>(this.apiUrladd, { params });
  }
//////////////////////////
List<dailytotal> existingRecords = DailytotalRepository.findByDate(formattedDate);

            if (existingRecords.isEmpty()) {
                // If no record exists for the date, create a new one and save it
                dailytotal dailyTotal = new dailytotal();
                dailyTotal.setDate(formattedDate);
                dailyTotal.setTotal_rs(mtotal); // Assuming this is how you get the total from DTO
                DailytotalRepository.save(dailyTotal);
            } else {
                // If a record already exists for the date, you may choose to handle this case as needed
                // Here, I'm just logging a message to indicate that the data was not saved
                System.out.println("Data for date " + formattedDate + " already exists. Skipping save operation.");
            }
///////////////////////
List<dailytotal> findByDate(String date);

////////////////////////////////////////
<button (click)="openComponent() ">Open Table</button>
<input type="date" [(ngModel)]="date">
<div class="box">
    <div class="container">
        <img class="logo" src="">
        <form #userForm="ngForm" (ngSubmit)="getdata(userForm.value)" class="input-field">
            <div class="input-row">
                <input type="text" class="input" placeholder="Pdip" [(ngModel)]="pdip" name="pdip">
                <input type="text" class="input" placeholder="Ptotal" [(ngModel)]="ptotal" name="ptotal">
                <input type="text" class="input" placeholder="pvalue" ngModel name="pvalue">
            </div>
            <div class="input-row">
                <input type="text" class="input" placeholder="Ddip" [(ngModel)]="dieseldip" name="dieseldip">
                <input type="text" class="input" placeholder="Dtotal" [(ngModel)]="dtotal" name="dtotal">
                <input type="text" class="input" placeholder="Dvalue" ngModel name="dvalue">
            </div>
            <button class="add"> Add Member </button>
        </form>
    </div>
</div>


////////////////////
export class DipReportComponent {
  // selectedDate!: Date | null;
  date: string = '';
  selectedItems: any[] = [];
  ptotal: string = ''; // Binding total values to these variables
  dtotal: string = '';
  pdip: string = ''; // Binding id values to these variables
  dieseldip: string = '';
  constructor(
    private http: HttpClient,
    private use: ServicesService,
    private dialog: MatDialog,// private pipe: FilterPipe
  ) { }
  ngOnInit(): void {
    this.use.selectedItems$.subscribe(items => {
      this.selectedItems = items;
      console.log('Received selected items:', this.selectedItems);
      // Handle the received data here
      this.calculateTotalValues();
      this.assignIdValues();
    });
  }
  assignIdValues() {
    // Ensure that selectedItems has at least two elements
    if (this.selectedItems.length > 1) {
      this.pdip = this.selectedItems[0].id;
      this.dieseldip = this.selectedItems[1].id;
    } else {
      this.pdip = ''; // Reset pdip if there are not enough elements
      this.dieseldip = ''; // Reset dieseldip if there are not enough elements
    }
  }

  // getAll() {
  //   this.http.get('http://localhost:9090/dipvalue').subscribe((data) => {
  //     console.log(data);
  //   });
  // }

  getdata(data: any) {
    data.date = this.date;

    console.info(data);
    this.use.addDip(data).subscribe((res) => {
    });
    //   console.info(data);
    //   if (data) {
    //     alert('Product is succefully add');
    //   }
    //   // location.reload();
    //   // alert('Product Add');
  }
  calculateTotalValues() {
    // Ensure that selectedItems has at least two elements
    if (this.selectedItems.length > 1) {
      this.ptotal = this.selectedItems[0].value;
      this.dtotal = this.selectedItems[1].value;
    } else {
      this.ptotal = ''; // Reset ptotal if there are not enough elements
      this.dtotal = ''; // Reset dtotal if there are not enough elements
    }
  }

  openComponent() {
    const dialogRef = this.dialog.open(DipTableComponent, {
      maxWidth: '100%',
      maxHeight: '100%',
      width: '60%',
      height: '50%',
    });
  }
}
/////////////////////////////////
<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
<div class="product-list">
    <table>
        <tr>
            <th>Id</th>
            <th scope="col">value</th>
            <th scope="col">number</th>
            <th><input type="checkbox" (change)="toggleSelectAll($event)"></th>
        </tr>
        <!-- | searchfilter: searchTerm -->
        <tr *ngFor="let items of productList">
            <!-- <td *ngFor="let items of productList">{{items.Id}}</td>
            <td *ngFor="let items of productList">{{items.Email}}</td>
            <td *ngFor="let items of productList">{{items.Phone}}</td> -->
            <td>{{items.id}}</td>
            <td>{{items.value}}</td>
            <td>{{items.number}}</td>
            <td><input type="checkbox" [(ngModel)]="items.selected"></td>

            <!-- <td>
                <a (click)="send(items.id)">
                    <mat-icon>send</mat-icon>
                </a>
            </td> -->
        </tr>
        <button (click)="sendSelected()">send</button>
    </table>
</div>

////////////////////////////
export class DipTableComponent {
  productList: any = [];
  constructor(
    private http: HttpClient,
    private use: ServicesService,
    private dialog: MatDialog,// private pipe: FilterPipe
  ) { }
  ngOnInit(): void {
    // this.loadPdf('report_2024-04-17');
    // this.fetchData();
    this.getAll();
  }
  getAll() {
    this.http.get('http://localhost:9090/dipvalue').subscribe((data) => {
      this.productList = data;
      console.log(data);
    });
  }
  toggleSelectAll(event: any) {
    const isChecked = event.target.checked;
    this.productList.forEach((item: { selected: any; }) => item.selected = isChecked);
  }

  sendSelected() {
    const selectedItems = this.productList.filter((item: { selected: any; }) => item.selected);
    console.log('Selected Items:', selectedItems);
    this.use.updateSelectedItems(selectedItems);
  }
  // send(id: number) {
  //   let current = this.productList.find((p: any) => {
  //     // alert('Your data succefully Update');
  //     return p.id = id;
  //   }); 
  //   if (current) {
  //     this.use.updateData(current);
  //     console.log('Data sent:', current);
  //   }
  // }

}
/////////////////////////////
 private selectedItemsSource = new BehaviorSubject<any[]>([]);
  selectedItems$ = this.selectedItemsSource.asObservable();

  updateSelectedItems(items: any[]) {
    this.selectedItemsSource.next(items);
  }


///////////////////////////////
 @GetMapping("/transactions")
    public List<jamabaki> getTransactions(@RequestParam String name) {
        return JamabakiRepository.findBySenderOrReceiver(name, name);
    }
///////////////////////
List<jamabaki> findBySenderOrReceiver(String sender, String receiver);


///////////////
<div>
    <h2>Select Sender/Receiver</h2>
    <mat-form-field appearance="fill">
        <mat-label>Select Sender/Receiver</mat-label>
        <mat-select [(ngModel)]="name" (selectionChange)="fetchTransactions()">
            <mat-option *ngFor="let name of names" [value]="name">
                {{ name }}
            </mat-option>
        </mat-select>
    </mat-form-field>
</div>
<!-- <div *ngIf="transactions">
    <h2>Sent Transactions:</h2>
    <ul>
      <li *ngFor="let transaction of transactions.sent">{{ transaction | json }}</li>
    </ul>
    <h2>Received Transactions:</h2>
    <ul>
      <li *ngFor="let transaction of transactions.received">{{ transaction | json }}</li>
    </ul>
  </div> -->

<table>
    <tr>
        <th scope="col">Date</th>
        <th scope="col">Name</th>
        <th scope="col">SenderAmount</th>
        <th scope="col">ReceiveAmount</th>
        <!-- <th scope="col">Amount</th> -->
    </tr>
    <!-- | searchfilter: searchTerm -->
        <!-- <td *ngFor="let items of productList">{{items.Id}}</td>
        <td *ngFor="let items of productList">{{items.Email}}</td>
        <td *ngFor="let items of productList">{{items.Phone}}</td> -->
    <tr *ngFor="let items of productList">
        <td>{{items.date}}</td>
        <td>{{name}}</td>
        <td *ngIf="this.name === items.sender; else receiveAmount">{{ items.amount }}</td>
        <ng-template #receiveAmount>
          <td>-</td>
        </ng-template>
        <td *ngIf="this.name === items.receiver; else senderAmount">{{ items.amount }}</td>
        <ng-template #senderAmount>
          <td>-</td>
        </ng-template>
        <!-- <td>{{items.receiver}}</td> -->
        <!-- <td>{{items.amount}}</td> -->
    </tr>
</table>


<!-- <pdf-viewer [src]="pdfSrc" [render-text]="true" [original-size]="false"
style="width: 400px; height: 500px"></pdf-viewer> -->

////////////////////////////////
Customerall() {
    this.http.get<any>('http://localhost:9090/Customerall').subscribe((data: any) => {
      // Assuming 'customers' is the property containing the array of names
      this.names = data.map((data: any) => data.name);
    });
  }
  sentTransactions: any[] | undefined;
  receivedTransactions: any[] | undefined;
  fetchTransactions(): void {
    this.use.getTransactions(this.name).subscribe((data: Transaction[]) => {
      console.log("Transactions:", data); // Log the response for debugging
      this.productList = data;
      // const filteredTransactions = data.filter(transaction => transaction.sender === this.name);

      // // Assign filtered transactions to productList
      // this.productList = filteredTransactions;

      // // You can perform additional actions here with the filtered transactions if needed
      // if (filteredTransactions.length > 0) {
      //   console.log("Transactions from", this.name, ":", filteredTransactions);
      // } else {
      //   console.log("No transactions found from", this.name);
      // }
      // this.transactions = data; // Assign the response to the component variable
      // console.log("Sent Transactions:", data.sent);
      // console.log("Received Transactions:", data.received);
      // this.sentTransactions = data.sent;
      // this.receivedTransactions = data.received;
    });
  }
/////////////
 export interface Transaction {
    type: string;
    id: number;
    date: string;
    sender: string;
    received: string;
    amount: number;
  }
/////////////
private apiUrl2 = 'http://localhost:9090/transactions'; // Adjust the URL as needed


  getTransactions(name: string): Observable<Transaction[]> {
    return this.http.get<Transaction[]>(`${this.apiUrl2}?name=${name}`);
  }
